{
  "type": "File",
  "start": 0,
  "end": 364,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 11,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 364,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 11,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [],
    "directives": [],
    "leadingComments": null,
    "innerComments": [
      {
        "type": "CommentLine",
        "value": " Stacks can be used to remove duplicate characters from a string that are stacked next to each other.",
        "start": 0,
        "end": 103,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 103
          }
        }
      },
      {
        "type": "CommentLine",
        "value": " For example, we take the string aabbccccc and convert it into abc.",
        "start": 104,
        "end": 173,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 69
          }
        }
      },
      {
        "type": "CommentLine",
        "value": " We can push the first character into a stack and skip if the top of the stack is equal to current character.",
        "start": 174,
        "end": 285,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 111
          }
        }
      },
      {
        "type": "CommentLine",
        "value": " Input:",
        "start": 286,
        "end": 295,
        "loc": {
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 9
          }
        }
      },
      {
        "type": "CommentLine",
        "value": " 2",
        "start": 296,
        "end": 300,
        "loc": {
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 4
          }
        }
      },
      {
        "type": "CommentLine",
        "value": " aaaaaabaabccccccc",
        "start": 301,
        "end": 321,
        "loc": {
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 20
          }
        }
      },
      {
        "type": "CommentLine",
        "value": " abbccbcd",
        "start": 322,
        "end": 333,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 11
          }
        }
      },
      {
        "type": "CommentLine",
        "value": " Output:",
        "start": 334,
        "end": 344,
        "loc": {
          "start": {
            "line": 8,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 10
          }
        }
      },
      {
        "type": "CommentLine",
        "value": " ababc",
        "start": 345,
        "end": 353,
        "loc": {
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 8
          }
        }
      },
      {
        "type": "CommentLine",
        "value": " abcbcd",
        "start": 354,
        "end": 363,
        "loc": {
          "start": {
            "line": 10,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 9
          }
        }
      }
    ]
  },
  "comments": [
    {
      "type": "CommentLine",
      "value": " Stacks can be used to remove duplicate characters from a string that are stacked next to each other.",
      "start": 0,
      "end": 103,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 103
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " For example, we take the string aabbccccc and convert it into abc.",
      "start": 104,
      "end": 173,
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 69
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " We can push the first character into a stack and skip if the top of the stack is equal to current character.",
      "start": 174,
      "end": 285,
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 111
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Input:",
      "start": 286,
      "end": 295,
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 9
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " 2",
      "start": 296,
      "end": 300,
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 4
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " aaaaaabaabccccccc",
      "start": 301,
      "end": 321,
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 20
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " abbccbcd",
      "start": 322,
      "end": 333,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 11
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Output:",
      "start": 334,
      "end": 344,
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 10
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " ababc",
      "start": 345,
      "end": 353,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 8
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " abcbcd",
      "start": 354,
      "end": 363,
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 9
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentLine",
      "value": " Stacks can be used to remove duplicate characters from a string that are stacked next to each other.",
      "start": 0,
      "end": 103,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 103
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " For example, we take the string aabbccccc and convert it into abc.",
      "start": 104,
      "end": 173,
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 69
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " We can push the first character into a stack and skip if the top of the stack is equal to current character.",
      "start": 174,
      "end": 285,
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 111
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Input:",
      "start": 286,
      "end": 295,
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 9
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " 2",
      "start": 296,
      "end": 300,
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 4
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " aaaaaabaabccccccc",
      "start": 301,
      "end": 321,
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 20
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " abbccbcd",
      "start": 322,
      "end": 333,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 11
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " Output:",
      "start": 334,
      "end": 344,
      "loc": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 10
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " ababc",
      "start": 345,
      "end": 353,
      "loc": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 8
        }
      }
    },
    {
      "type": "CommentLine",
      "value": " abcbcd",
      "start": 354,
      "end": 363,
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 9
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 364,
      "end": 364,
      "loc": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 11,
          "column": 0
        }
      }
    }
  ]
}