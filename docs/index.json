[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/hashing/hash-map.ts",
    "content": "",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/hashing/hash-map.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/index.ts",
    "content": "import { Queue } from \"./queue/queue\";\nimport { Stack } from \"./stack/stack\";\n\nconsole.log(\"Creating stacks\");\n\nconst stack = new Stack();\nstack.push(1);\nstack.push(2);\n\nconsole.log(\"stack items\", stack);\n\nconsole.log(\"Creating Queue\");\nconst queue = new Queue();\nqueue.add(2);\nqueue.add(3);\n\nconsole.log(\"queue items\", queue);\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "stack",
    "memberof": "src/index.ts",
    "static": true,
    "longname": "src/index.ts~stack",
    "access": "public",
    "export": false,
    "importPath": "dsa-gfg/src/index.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "src/stack/stack.ts~Stack"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "queue",
    "memberof": "src/index.ts",
    "static": true,
    "longname": "src/index.ts~queue",
    "access": "public",
    "export": false,
    "importPath": "dsa-gfg/src/index.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "src/queue/queue.ts~Queue"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/linkedlist/count-nodes.ts",
    "content": "\nclass CountNodes {\n    // public getCount(Node head){\n\n    //     //Code here\n    // }\n}\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/linkedlist/count-nodes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "class",
    "name": "CountNodes",
    "memberof": "src/linkedlist/count-nodes.ts",
    "static": true,
    "longname": "src/linkedlist/count-nodes.ts~CountNodes",
    "access": "public",
    "export": false,
    "importPath": "dsa-gfg/src/linkedlist/count-nodes.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 2,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/linkedlist/linked-list.spec.ts",
    "content": "import { LinkedList } from \"./linked-list\";\n\ntest(\"basic\", () => {\n  const list = new LinkedList();\n  list.add(1);\n  list.add(10);\n  list.add(5);\n  expect(Array.from(list.values())).toMatchObject([5, 10, 1]);\n//   expect(list.dequeue()).toBe(1);\n//   expect(Array.from(list.values())).toMatchObject([10, 5]);\n//   expect(list.dequeue()).toBe(10);\n//   expect(list.dequeue()).toBe(5);\n//   expect(list.dequeue()).toBe(undefined);\n//   expect(Array.from(list.values())).toMatchObject([]);\n//   list.add(5);\n//   expect(Array.from(list.values())).toMatchObject([5]);\n});\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/linkedlist/linked-list.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/linkedlist/linked-list.ts",
    "content": "// Insertion in a linked list\n\nclass LinkedListNode {\n    public data: number;\n    public next: LinkedListNode | null;\n\n    constructor(a: number) {\n        this.data = a;\n        this.next = null;\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LinkedList {\n    public head: LinkedListNode | null = null;\n    public tail: LinkedListNode | null = null;\n    // insert at beginning\n    public add(a: number) {\n        const temp = new LinkedListNode(a);\n        if (this.head == null) {\n            this.head = temp;\n            return;\n        }\n        temp.next = this.head;\n        this.head = temp;\n    }\n    // insert at end\n    public insertAtEnd(a: number) {\n        const temp = new LinkedListNode(a);\n        if (this.head == null ) {\n            this.head = temp;\n            this.tail = this.head;\n            return;\n        }\n        if (this.tail) {\n            this.tail.next = temp;\n        }\n        this.tail = temp;\n    }\n    public values() {\n        const val = [];\n        let temp = this.head;\n        while (temp != null) {\n            val.push(temp.data);\n            temp = temp.next;\n        }\n        return val;\n    }\n    // get count of nodes in a linked list\n    public count(): number {\n        let count = 0;\n        if (this.head === null) {\n            return count;\n        }\n        count = 1;\n        let temp: LinkedListNode = this.head;\n        while (temp.next != null) {\n            ++count;\n            temp = temp.next;\n        }\n        return count;\n    }\n    public getNth() {\n        \n    }\n}\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/linkedlist/linked-list.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "class",
    "name": "LinkedListNode",
    "memberof": "src/linkedlist/linked-list.ts",
    "static": true,
    "longname": "src/linkedlist/linked-list.ts~LinkedListNode",
    "access": "public",
    "export": false,
    "importPath": "dsa-gfg/src/linkedlist/linked-list.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 3,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/linkedlist/linked-list.ts~LinkedListNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedListNode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "data",
    "memberof": "src/linkedlist/linked-list.ts~LinkedListNode",
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedListNode#data",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "next",
    "memberof": "src/linkedlist/linked-list.ts~LinkedListNode",
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedListNode#next",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "LinkedList",
    "memberof": "src/linkedlist/linked-list.ts",
    "static": true,
    "longname": "src/linkedlist/linked-list.ts~LinkedList",
    "access": "public",
    "export": true,
    "importPath": "dsa-gfg/src/linkedlist/linked-list.ts",
    "importStyle": "{LinkedList}",
    "description": "",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 61,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/linkedlist/linked-list.ts~LinkedList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedList#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "head",
    "memberof": "src/linkedlist/linked-list.ts~LinkedList",
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedList#head",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "tail",
    "memberof": "src/linkedlist/linked-list.ts~LinkedList",
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedList#tail",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "add",
    "memberof": "src/linkedlist/linked-list.ts~LinkedList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedList#add",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "insertAtEnd",
    "memberof": "src/linkedlist/linked-list.ts~LinkedList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedList#insertAtEnd",
    "access": "public",
    "description": "",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "values",
    "memberof": "src/linkedlist/linked-list.ts~LinkedList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedList#values",
    "access": "public",
    "description": "",
    "lineNumber": 40,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "count",
    "memberof": "src/linkedlist/linked-list.ts~LinkedList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedList#count",
    "access": "public",
    "description": "",
    "lineNumber": 50,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "getNth",
    "memberof": "src/linkedlist/linked-list.ts~LinkedList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/linkedlist/linked-list.ts~LinkedList#getNth",
    "access": "public",
    "description": "",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/queue/lru-cache.ts",
    "content": "// The task is to design and implement methods of an LRU cache.\n// The class has two methods get() and set() which are defined as follows.\n// get(x)   : Returns the value of the key x if the key exists in the cache otherwise returns -1.\n// set(x,y) : inserts the value if the key x is not already present.\n// If the cache reaches its capacity it should invalidate the least recently used item before inserting the new item.\n// In the constructor of the class the size of the cache should be intitialized.\nimport { Queue } from \"./queue\";\n\nexport class LRUCache<T> {\n    // This problem requires implementation of linkedhashmap.\n    constructor(size: number) {\n        // his.queue = new Queue(size);\n    }\n\n    public get(x: number) {\n        // empty\n    }\n\n    public set(x: T, y: T) {\n        // empty\n    }\n}",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/queue/lru-cache.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "class",
    "name": "LRUCache",
    "memberof": "src/queue/lru-cache.ts",
    "static": true,
    "longname": "src/queue/lru-cache.ts~LRUCache",
    "access": "public",
    "export": true,
    "importPath": "dsa-gfg/src/queue/lru-cache.ts",
    "importStyle": "{LRUCache}",
    "description": "",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 76,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/queue/lru-cache.ts~LRUCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/lru-cache.ts~LRUCache#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "get",
    "memberof": "src/queue/lru-cache.ts~LRUCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/lru-cache.ts~LRUCache#get",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "set",
    "memberof": "src/queue/lru-cache.ts~LRUCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/lru-cache.ts~LRUCache#set",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/queue/maximum-subarrays.ts",
    "content": "",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/queue/maximum-subarrays.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/queue/queue-node.spec.ts",
    "content": "import { QueueNodeImpl } from \"./queue-node\";\n\ntest(\"basic queue test using a linked list\", () => {\n  const queue = new QueueNodeImpl();\n  queue.add(1);\n  queue.poll();\n  expect(queue.isEmpty()).toBe(true);\n});\n\ntest(\"insert 5 elements and remove 1, length should be 4\", () => {\n  const queue = new QueueNodeImpl();\n  queue.add(1);\n  queue.add(2);\n  queue.add(3);\n  queue.add(4);\n  queue.add(5);\n  queue.poll();\n  expect(queue.size()).toEqual(4);\n  expect(queue.values()).toEqual([2, 3, 4, 5]);\n  queue.poll();\n  expect(queue.values()).toEqual([3, 4, 5]);\n  queue.add(6);\n  expect(queue.values()).toEqual([3, 4, 5, 6]);\n  queue.poll();\n  queue.poll();\n  expect(queue.values()).toEqual([5, 6]);\n});\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/queue/queue-node.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/queue/queue-node.ts",
    "content": "/*The structure of the node of the queue is*/\n\n/**\n * This is Queue Node\n */\nclass QueueNode<T> {\n    public data: T;\n    public next: QueueNode<T> | null;\n    constructor(a: T) {\n        this.data = a;\n        this.next = null;\n    }\n}\n/**\n * This class is implementation of Queue using linked list\n */\n// tslint:disable-next-line: max-classes-per-file\nexport class QueueNodeImpl<T> {\n    public front: QueueNode<T> | null = null;\n    public rear: QueueNode<T> | null = null;\n\n    /**\n     * This function should add an item at rear\n     * @param a\n     */\n    public add(a: T) {\n        // Your code here\n        const temp = new QueueNode(a);\n        if (this.front == null) {\n            this.front = temp;\n            this.rear = this.front;\n        } else {\n            if (this.rear) {\n                this.rear.next = temp;\n            }\n            this.rear = temp;\n        }\n    }\n\n    /**\n     * This function should remove front item from queue and\n     * return the removed item\n     * @return {T} item removed\n     */\n    public poll(): T | undefined {\n        if (this.front == null) {\n            return undefined;\n        }\n        if (this.rear === this.front) {\n            const data = this.front.data;\n            this.front = this.rear = null;\n            return data;\n        }\n        const temp = this.front;\n        this.front = temp.next;\n        return temp.data;\n    }\n\n    /**\n     * The method to check if queue is empty or not\n     * @return {boolean} true or false\n     */\n    public isEmpty(): boolean {\n        return this.front === this.rear ? true : false;\n    }\n\n    /**\n     * The method to return size of the queue\n     * @return {boolean} true or false\n     */\n    public size(): number {\n        if (this.front === null) {\n            return 0;\n        }\n        let size = 1;\n        let temp = this.front;\n        while (temp.next != null) {\n            size++;\n            temp = temp.next;\n        }\n        return size;\n    }\n\n    /**\n     * This function return the values of the queue\n     * @return {T[]} array of values\n     */\n    public values(): T[] {\n        const tempArr: T[] = [];\n        if (this.front === null) {\n            return [];\n        }\n        let temp = this.front;\n        tempArr.push(temp.data);\n        while (temp.next != null) {\n            temp = temp.next;\n            tempArr.push(temp.data);\n        }\n        return tempArr;\n    }\n}\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/queue/queue-node.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "class",
    "name": "QueueNode",
    "memberof": "src/queue/queue-node.ts",
    "static": true,
    "longname": "src/queue/queue-node.ts~QueueNode",
    "access": "public",
    "export": false,
    "importPath": "dsa-gfg/src/queue/queue-node.ts",
    "importStyle": null,
    "description": "This is Queue Node",
    "lineNumber": 6,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/queue/queue-node.ts~QueueNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "data",
    "memberof": "src/queue/queue-node.ts~QueueNode",
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNode#data",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "next",
    "memberof": "src/queue/queue-node.ts~QueueNode",
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNode#next",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "QueueNodeImpl",
    "memberof": "src/queue/queue-node.ts",
    "static": true,
    "longname": "src/queue/queue-node.ts~QueueNodeImpl",
    "access": "public",
    "export": true,
    "importPath": "dsa-gfg/src/queue/queue-node.ts",
    "importStyle": "{QueueNodeImpl}",
    "description": "This class is implementation of Queue using linked list",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 87,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/queue/queue-node.ts~QueueNodeImpl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNodeImpl#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "front",
    "memberof": "src/queue/queue-node.ts~QueueNodeImpl",
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNodeImpl#front",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "rear",
    "memberof": "src/queue/queue-node.ts~QueueNodeImpl",
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNodeImpl#rear",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "add",
    "memberof": "src/queue/queue-node.ts~QueueNodeImpl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNodeImpl#add",
    "access": "public",
    "description": "This function should add an item at rear",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "poll",
    "memberof": "src/queue/queue-node.ts~QueueNodeImpl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNodeImpl#poll",
    "access": "public",
    "description": "This function should remove front item from queue and\nreturn the removed item",
    "lineNumber": 45,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/queue/queue-node.ts~QueueNodeImpl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNodeImpl#isEmpty",
    "access": "public",
    "description": "The method to check if queue is empty or not",
    "lineNumber": 63,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "size",
    "memberof": "src/queue/queue-node.ts~QueueNodeImpl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNodeImpl#size",
    "access": "public",
    "description": "The method to return size of the queue",
    "lineNumber": 71,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "values",
    "memberof": "src/queue/queue-node.ts~QueueNodeImpl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue-node.ts~QueueNodeImpl#values",
    "access": "public",
    "description": "This function return the values of the queue",
    "lineNumber": 88,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/queue/queue.spec.ts",
    "content": "import { Queue } from \"./queue\";\n\ntest(\"basic queue test using a array\", () => {\n  const queue = new Queue();\n  queue.add(1);\n  queue.poll();\n  expect(queue.isEmpty()).toBe(true);\n});\n\ntest(\"insert 5 elements and remove 1, length should be 4\", () => {\n  const queue = new Queue(10);\n  queue.add(1);\n  queue.add(2);\n  queue.add(3);\n  queue.add(4);\n  queue.add(5);\n  queue.poll();\n  expect(queue.size()).toEqual(4);\n  expect(queue.values()).toEqual([2, 3, 4, 5]);\n  queue.poll();\n  expect(queue.values()).toEqual([3, 4, 5]);\n  queue.add(6);\n  expect(queue.values()).toEqual([3, 4, 5, 6]);\n  queue.poll();\n  queue.poll();\n  expect(queue.values()).toEqual([5, 6]);\n  queue.add(7);\n  queue.add(8);\n  // reverse a queue\n  expect(queue.reverse()).toEqual([8, 7, 6, 5]);\n});\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/queue/queue.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/queue/queue.ts",
    "content": "import { Stack } from \"../stack/stack\";\n\n// Implement a Queue using Array. Your task is only to complete the functions push and pop.\n/* This is Queue class using array */\nexport class Queue<T> {\n    public front: number = 0;\n    public rear: number = 0;\n    public arr: T[];\n\n    constructor(size: number = 10) {\n        this.front = 0;\n        this.rear = 0;\n        this.arr = new Array(size);\n    }\n\n    /** The method add to push element into the queue\n     * @param {number} a - this is a value.\n     * @return {void}\n     */\n    public add(a: T): void {\n        this.arr[this.rear++] = a;\n    }\n\n    /** The method pop which return the element poped out of the queue\n     * @return {T} element which is removed\n     */\n    /* */\n    public poll(): T | undefined {\n        // Your code\n        if (this.front === this.rear) {\n            return;\n        }\n        const elem = this.arr[this.front];\n        delete this.arr[this.front];\n        this.front++;\n        return elem;\n    }\n\n    /**\n     * The method to check if queue is empty or not\n     * @return {boolean} true or false\n     */\n    public isEmpty(): boolean {\n        return this.rear - this.front === 0 ? true : false;\n    }\n\n    /**\n     * The method to return size of the queue\n     * @return {boolean} true or false\n     */\n    public size(): number {\n        return this.rear - this.front;\n    }\n\n    /**\n     * This function return the values of the queue\n     * @return {T[]} array of values\n     */\n    public values(): T[] {\n        const tempArr: T[] = [];\n        for (let i = this.front; i < this.rear; i++) {\n            tempArr.push(this.arr[i]);\n        }\n        return tempArr;\n    }\n\n    /**\n     * This function Reverses a Queue\n     * @returns {T[]} array of values\n     */\n    public reverse(): T[] {\n        const stack = new Stack<T>();\n        this.values().forEach( (val) => {\n            stack.push(val);\n        });\n        return stack.values();\n    }\n}\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/queue/queue.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "class",
    "name": "Queue",
    "memberof": "src/queue/queue.ts",
    "static": true,
    "longname": "src/queue/queue.ts~Queue",
    "access": "public",
    "export": true,
    "importPath": "dsa-gfg/src/queue/queue.ts",
    "importStyle": "{Queue}",
    "description": "",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 103,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/queue/queue.ts~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue.ts~Queue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "front",
    "memberof": "src/queue/queue.ts~Queue",
    "static": false,
    "longname": "src/queue/queue.ts~Queue#front",
    "access": "public",
    "description": "",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "rear",
    "memberof": "src/queue/queue.ts~Queue",
    "static": false,
    "longname": "src/queue/queue.ts~Queue#rear",
    "access": "public",
    "description": "",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "arr",
    "memberof": "src/queue/queue.ts~Queue",
    "static": false,
    "longname": "src/queue/queue.ts~Queue#arr",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "add",
    "memberof": "src/queue/queue.ts~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue.ts~Queue#add",
    "access": "public",
    "description": "The method add to push element into the queue",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "poll",
    "memberof": "src/queue/queue.ts~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue.ts~Queue#poll",
    "access": "public",
    "description": "The method pop which return the element poped out of the queue",
    "lineNumber": 28,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/queue/queue.ts~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue.ts~Queue#isEmpty",
    "access": "public",
    "description": "The method to check if queue is empty or not",
    "lineNumber": 43,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "size",
    "memberof": "src/queue/queue.ts~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue.ts~Queue#size",
    "access": "public",
    "description": "The method to return size of the queue",
    "lineNumber": 51,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "values",
    "memberof": "src/queue/queue.ts~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue.ts~Queue#values",
    "access": "public",
    "description": "This function return the values of the queue",
    "lineNumber": 59,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "reverse",
    "memberof": "src/queue/queue.ts~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/queue/queue.ts~Queue#reverse",
    "access": "public",
    "description": "This function Reverses a Queue",
    "lineNumber": 71,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/stack/remove-consecutive-duplicates.ts",
    "content": "// Stacks can be used to remove duplicate characters from a string that are stacked next to each other.\n// For example, we take the string aabbccccc and convert it into abc.\n// We can push the first character into a stack and skip if the top of the stack is equal to current character.\n\n// Input:\n// 2\n// aaaaaabaabccccccc\n// abbccbcd\n\n// Output:\n// ababc\n// abcbcd\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/stack/remove-consecutive-duplicates.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/stack/stack-node.ts",
    "content": "// Implement a Stack using Linked List .\nclass StackNode {\n    public data: number;\n    public next: StackNode | null;\n    constructor(a: number) {\n        this.data = a;\n        this.next = null;\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nclass MyStack {\n    public top: StackNode | null = null;\n    public push(a: number) {\n        // Add your code here\n        if (this.top == null) {\n            const temp = new StackNode(a);\n            this.top = temp;\n        } else {\n            const temp = new StackNode(a);\n            temp.next = this.top;\n            this.top = temp;\n        }\n    }\n    public pop() {\n        if ( this.top == null) {\n            return -1;\n        }\n        const temp = this.top.next;\n        const popped: StackNode = this.top;\n        this.top = temp;\n        return popped.data;\n    }\n}\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/stack/stack-node.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "StackNode",
    "memberof": "src/stack/stack-node.ts",
    "static": true,
    "longname": "src/stack/stack-node.ts~StackNode",
    "access": "public",
    "export": false,
    "importPath": "dsa-gfg/src/stack/stack-node.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 2,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stack/stack-node.ts~StackNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/stack-node.ts~StackNode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "data",
    "memberof": "src/stack/stack-node.ts~StackNode",
    "static": false,
    "longname": "src/stack/stack-node.ts~StackNode#data",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "next",
    "memberof": "src/stack/stack-node.ts~StackNode",
    "static": false,
    "longname": "src/stack/stack-node.ts~StackNode#next",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "MyStack",
    "memberof": "src/stack/stack-node.ts",
    "static": true,
    "longname": "src/stack/stack-node.ts~MyStack",
    "access": "public",
    "export": false,
    "importPath": "dsa-gfg/src/stack/stack-node.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 12,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stack/stack-node.ts~MyStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/stack-node.ts~MyStack#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "top",
    "memberof": "src/stack/stack-node.ts~MyStack",
    "static": false,
    "longname": "src/stack/stack-node.ts~MyStack#top",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "push",
    "memberof": "src/stack/stack-node.ts~MyStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/stack-node.ts~MyStack#push",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "pop",
    "memberof": "src/stack/stack-node.ts~MyStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/stack-node.ts~MyStack#pop",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/stack/stack.spec.ts",
    "content": "import { Stack } from \"./stack\";\n\ntest(\"basic stack test using a array\", () => {\n  const stack = new Stack();\n  stack.push(1);\n  stack.pop();\n  expect(stack.isEmpty()).toBe(true);\n});\n\ntest(\"insert 5 elements and remove 1, length should be 4\", () => {\n  const stack = new Stack();\n  stack.push(1);\n  stack.push(2);\n  stack.push(3);\n  stack.push(4);\n  stack.push(5);\n  stack.pop();\n  expect(stack.size()).toEqual(4);\n  expect(stack.values()).toEqual([4, 3, 2, 1]);\n});\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/stack/stack.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/stack/stack.ts",
    "content": "// Implement a Stack using Array. Your task is to complete the functions below.\n// You are required to complete two methods push which take one argument an integer 'x' to be pushed into the stack\n// and pop which returns a integer poped out from the stack.\n/**\n * this is Stack Class.\n */\nexport class Stack<T> {\n    public top: number;\n    public arr: T[] = [];\n    constructor() {\n        this.top = -1;\n    }\n\n    /** The method push to push element into the stack\n     * @param {number} a - this is a value.\n     * @return {void}\n     */\n    public push(a: T): void {\n        if (!a) {\n            // tslint:disable-next-line: no-console\n            console.debug(\"Please push a proper value\");\n            return;\n        }\n        ++this.top;\n        this.arr[this.top] = a;\n    }\n\n    /**\n     * The method pop which will return the top element from the stack\n     * @return {T} popped element\n     */\n    public pop(): T | undefined {\n        // Your code here\n        if ( this.top === -1) {\n            return undefined;\n        }\n        const topElement = this.arr[this.top];\n        this.arr = this.arr.filter( (elem, index) => {\n            return index !== this.top;\n        });\n        this.top = this.top - 1;\n        return topElement;\n    }\n\n    /**\n     * This method will return if stack is empty or not\n     * @return {boolean} true or false\n     */\n    public isEmpty(): boolean {\n        return this.top < 0;\n    }\n\n    /**\n     * This will return the size of the stack\n     * @return {number} size\n     */\n    public size(): number {\n        const size = this.top + 1;\n        return size;\n    }\n\n    /**\n     * This function returns the values in a stack\n     * @returns {T[]}\n     */\n    public values(): T[] {\n        const tempArr: T[] = [];\n        for (let i = this.top; i >= 0; i--) {\n            tempArr.push(this.arr[i]);\n        }\n        return tempArr;\n    }\n}\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/stack/stack.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "Stack",
    "memberof": "src/stack/stack.ts",
    "static": true,
    "longname": "src/stack/stack.ts~Stack",
    "access": "public",
    "export": true,
    "importPath": "dsa-gfg/src/stack/stack.ts",
    "importStyle": "{Stack}",
    "description": "this is Stack Class.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 132,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stack/stack.ts~Stack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/stack.ts~Stack#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "arr",
    "memberof": "src/stack/stack.ts~Stack",
    "static": false,
    "longname": "src/stack/stack.ts~Stack#arr",
    "access": "public",
    "description": "",
    "lineNumber": 9,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "top",
    "memberof": "src/stack/stack.ts~Stack",
    "static": false,
    "longname": "src/stack/stack.ts~Stack#top",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "push",
    "memberof": "src/stack/stack.ts~Stack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/stack.ts~Stack#push",
    "access": "public",
    "description": "The method push to push element into the stack",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "pop",
    "memberof": "src/stack/stack.ts~Stack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/stack.ts~Stack#pop",
    "access": "public",
    "description": "The method pop which will return the top element from the stack",
    "lineNumber": 32,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "src/stack/stack.ts~Stack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/stack.ts~Stack#isEmpty",
    "access": "public",
    "description": "This method will return if stack is empty or not",
    "lineNumber": 49,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "size",
    "memberof": "src/stack/stack.ts~Stack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/stack.ts~Stack#size",
    "access": "public",
    "description": "This will return the size of the stack",
    "lineNumber": 57,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "values",
    "memberof": "src/stack/stack.ts~Stack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/stack.ts~Stack#values",
    "access": "public",
    "description": "This function returns the values in a stack",
    "lineNumber": 66,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/stack/two-stacks.ts",
    "content": "// Your task is to implement  2 stacks in one array efficiently .\nclass TwoStack {\n    public size: number;\n    public top1: number;\n    public top2: number;\n    public arr: number[] = [];\n    constructor() {\n        this.size = 100;\n        this.top1 = -1;\n        this.top2 = this.size;\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class Stacks {\n    // sq is the object of class TwoStack\n    /* The method push to push element into the stack 2 */\n    public push1(x: number, sq: TwoStack) {\n        sq.top1 = sq.top1 + 1;\n        sq.arr[sq.top1] = x;\n    }\n    /* The method push to push element into the stack 2*/\n    public push2(x: number, sq: TwoStack) {\n        sq.top2 = sq.top2 - 1;\n        sq.arr[sq.top2] = x;\n    }\n    /* The method pop to pop element from the stack 1 */\n    // Return the popped element\n    public pop1(sq: TwoStack) {\n        if (sq.top1 === -1) {\n            return -1;\n        }\n        const topElement = sq.arr[sq.top1];\n        sq.top1--;\n        return topElement;\n    }\n    /* The method pop to pop element from the stack 2 */\n    // Return the popper element\n    public pop2(sq: TwoStack) {\n        if (sq.top2 === 100) {\n            return 100;\n        }\n        const topElement = sq.arr[sq.top2];\n        sq.top2++;\n        return topElement;\n    }\n}\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/stack/two-stacks.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "class",
    "name": "TwoStack",
    "memberof": "src/stack/two-stacks.ts",
    "static": true,
    "longname": "src/stack/two-stacks.ts~TwoStack",
    "access": "public",
    "export": false,
    "importPath": "dsa-gfg/src/stack/two-stacks.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 2,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stack/two-stacks.ts~TwoStack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/two-stacks.ts~TwoStack#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "arr",
    "memberof": "src/stack/two-stacks.ts~TwoStack",
    "static": false,
    "longname": "src/stack/two-stacks.ts~TwoStack#arr",
    "access": "public",
    "description": "",
    "lineNumber": 6,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "size",
    "memberof": "src/stack/two-stacks.ts~TwoStack",
    "static": false,
    "longname": "src/stack/two-stacks.ts~TwoStack#size",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "top1",
    "memberof": "src/stack/two-stacks.ts~TwoStack",
    "static": false,
    "longname": "src/stack/two-stacks.ts~TwoStack#top1",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "top2",
    "memberof": "src/stack/two-stacks.ts~TwoStack",
    "static": false,
    "longname": "src/stack/two-stacks.ts~TwoStack#top2",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "class",
    "name": "Stacks",
    "memberof": "src/stack/two-stacks.ts",
    "static": true,
    "longname": "src/stack/two-stacks.ts~Stacks",
    "access": "public",
    "export": true,
    "importPath": "dsa-gfg/src/stack/two-stacks.ts",
    "importStyle": "{Stacks}",
    "description": "",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "push1",
    "memberof": "src/stack/two-stacks.ts~Stacks",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/two-stacks.ts~Stacks#push1",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "TwoStack"
        ],
        "spread": false,
        "optional": false,
        "name": "sq",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "push2",
    "memberof": "src/stack/two-stacks.ts~Stacks",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/two-stacks.ts~Stacks#push2",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "TwoStack"
        ],
        "spread": false,
        "optional": false,
        "name": "sq",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "pop1",
    "memberof": "src/stack/two-stacks.ts~Stacks",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/two-stacks.ts~Stacks#pop1",
    "access": "public",
    "description": "",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "TwoStack"
        ],
        "spread": false,
        "optional": false,
        "name": "sq",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "pop2",
    "memberof": "src/stack/two-stacks.ts~Stacks",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stack/two-stacks.ts~Stacks#pop2",
    "access": "public",
    "description": "",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "TwoStack"
        ],
        "spread": false,
        "optional": false,
        "name": "sq",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/star/star.ts",
    "content": "class Star {\n    //      *\n    //     * *\n    //    * * *\n    // print above pattern given the level\n    public printStar(num: number) {\n        for (let i = 1; i <= num; i++) {\n            for (let k = 1; k <= (num - i); k++) {\n                document.write(\"&nbsp;\");\n            }\n            for (let j = 1; j <= i ; j++) {\n                document.write(\"*\");\n            }\n            document.write(\"<br/>\");\n        }\n    }\n    // 4 3 2 1\n    //  3 2 1\n    //   2 1\n    //    1\n    // printNumbers(4);\n    public printNumbers(num: number) {\n        for (let i = num; i >= 1; i--) {\n            for (let k = 1; k <= (num - i) ; k++) {\n                document.write(\"&nbsp;\");\n            }\n            for (let j = i; j >= 1 ; j--) {\n                document.write(j + \"\");\n            }\n            document.write(\"<br/>\");\n        }\n    }\n}\n\n// document.write('<br/>');\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/star/star.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "class",
    "name": "Star",
    "memberof": "src/star/star.ts",
    "static": true,
    "longname": "src/star/star.ts~Star",
    "access": "public",
    "export": false,
    "importPath": "dsa-gfg/src/star/star.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 1,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "printStar",
    "memberof": "src/star/star.ts~Star",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/star/star.ts~Star#printStar",
    "access": "public",
    "description": "",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "printNumbers",
    "memberof": "src/star/star.ts~Star",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/star/star.ts~Star#printNumbers",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "src/trees/tree-node.ts",
    "content": "export default class TreeNode<T> {\n    public data: T;\n    public left: TreeNode<T> | null;\n    public right: TreeNode<T> | null;\n    constructor(item: T) {\n        this.data = item;\n        this.left = this.right = null;\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/trees/tree-node.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "class",
    "name": "TreeNode",
    "memberof": "src/trees/tree-node.ts",
    "static": true,
    "longname": "src/trees/tree-node.ts~TreeNode",
    "access": "public",
    "export": true,
    "importPath": "dsa-gfg/src/trees/tree-node.ts",
    "importStyle": "TreeNode",
    "description": "",
    "lineNumber": 1,
    "interface": false
  },
  {
    "__docId__": 160,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/trees/tree-node.ts~TreeNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/trees/tree-node.ts~TreeNode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "data",
    "memberof": "src/trees/tree-node.ts~TreeNode",
    "static": false,
    "longname": "src/trees/tree-node.ts~TreeNode#data",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "left",
    "memberof": "src/trees/tree-node.ts~TreeNode",
    "static": false,
    "longname": "src/trees/tree-node.ts~TreeNode#left",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/trees/tree-operations.spec.ts",
    "content": "import TreeNode from \"./tree-node\";\nimport { TreeOperations } from \"./tree-operations\";\n\nlet treeOps: TreeOperations<number>;\n\nbeforeEach( () => {\n    treeOps = new TreeOperations<number>();\n});\n\ntest(\"basic test for level order traversal\", () => {\n  const tree = new TreeNode<number>(1);\n  tree.left = new TreeNode<number>(3);\n  tree.right = new TreeNode<number>(2);\n  let outputData = \"\";\n  const storeLog = (inputs: any) => (outputData += inputs);\n  console.log = jest.fn(storeLog);\n  treeOps.levelOrder(tree);\n  expect(outputData).toBe(\"1 3 2 \");\n});\n\ntest(\"level order traversal for more elements\", () => {\n    const tree = new TreeNode<number>(10);\n    tree.left = new TreeNode<number>(20);\n    tree.right = new TreeNode<number>(30);\n    tree.left.left = new TreeNode<number>(40);\n    tree.left.right = new TreeNode<number>(60);\n    let outputData = \"\";\n    const storeLog = (inputs: any) => (outputData += inputs);\n    console.log = jest.fn(storeLog);\n    treeOps.levelOrder(tree);\n    expect(outputData).toBe(\"10 20 30 40 60 \");\n});\n\ntest(\"basic test for level order traversal\", () => {\n    const tree = new TreeNode<number>(1);\n    tree.left = new TreeNode<number>(3);\n    tree.right = new TreeNode<number>(2);\n    let outputData = \"\";\n    const storeLog = (inputs: any) => (outputData += inputs);\n    console.log = jest.fn(storeLog);\n    treeOps.levelOrderByLine(tree);\n    expect(outputData).toBe(\"1 $ 3 2 $ \");\n});\n\ntest(\"level order traversal for more elements\", () => {\n    const tree = new TreeNode<number>(10);\n    tree.left = new TreeNode<number>(20);\n    tree.right = new TreeNode<number>(30);\n    tree.left.left = new TreeNode<number>(40);\n    tree.left.right = new TreeNode<number>(60);\n    let outputData = \"\";\n    const storeLog = (inputs: any) => (outputData += inputs);\n    console.log = jest.fn(storeLog);\n    treeOps.levelOrderByLine(tree);\n    expect(outputData).toBe(\"10 $ 20 30 $ 40 60 $ \");\n});\n\ntest(\"height of binary tree should be 3\", () => {\n    const tree = new TreeNode<number>(10);\n    tree.left = new TreeNode<number>(20);\n    tree.right = new TreeNode<number>(30);\n    tree.left.left = new TreeNode<number>(40);\n    tree.left.right = new TreeNode<number>(60);\n    let outputData = \"\";\n    const storeLog = (inputs: any) => (outputData += inputs);\n    console.log = jest.fn(storeLog);\n    treeOps.levelOrderByLine(tree);\n    expect(outputData).toBe(\"10 20 30 60 40 \");\n});\n\ntest(\"print spiral form of binary tree\", () => {\n    const tree = new TreeNode<number>(10);\n    tree.left = new TreeNode<number>(20);\n    tree.right = new TreeNode<number>(30);\n\n    const leftNode = new TreeNode<number>(40);\n    leftNode.left = new TreeNode<number>(50);\n    leftNode.right = new TreeNode<number>(55);\n    tree.left.left = leftNode;\n\n    const rightNode = new TreeNode<number>(60);\n    rightNode.left = new TreeNode<number>(70);\n    rightNode.right = new TreeNode<number>(80);\n    tree.left.right = rightNode;\n\n    let outputData = \"\";\n    const storeLog = (inputs: any) => (outputData += inputs);\n    console.log = jest.fn(storeLog);\n    treeOps.spiral(tree);\n    expect(outputData).toBe(\"10 20 30 60 40 50 55 70 80\");\n});\n\ntest(\"print spiral form of binary tree\", () => {\n    const tree = new TreeNode<number>(10);\n    tree.left = new TreeNode<number>(20);\n    tree.right = new TreeNode<number>(30);\n    tree.left.left = new TreeNode<number>(40);\n    tree.left.right = new TreeNode<number>(60);\n    let outputData = \"\";\n    const storeLog = (inputs: any) => (outputData += inputs);\n    console.log = jest.fn(storeLog);\n    treeOps.spiral(tree);\n    expect(outputData).toBe(\"10 20 30 60 40 \");\n});\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/trees/tree-operations.spec.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/trees/tree-operations.ts",
    "content": "import { Queue } from \"../queue/queue\";\nimport TreeNode from \"./tree-node\";\n/**\n * This is implementation of operations on a Tree\n */\nexport class TreeOperations<T> {\n\n    /**\n     * You are given a tree and you need to do the level order traversal on this tree.\n     * Level order traversal of a tree is breadth-first traversal for the tree.\n     * Testcase1: The tree is\n     *         1\n     *      /      \\\n     *    3       2\n     * So, the level order would be 1 3 2\n     * Testcase2: The tree is\n     *                           10\n     *                        /        \\\n     *                     20         30\n     *                  /       \\\n     *               40       60\n     * So, the level order would be 10 20 30 40 60\n     * @param node\n     */\n    public levelOrder(node: TreeNode<T>): void {\n        const queue = new Queue<TreeNode<T>>();\n        queue.add(node);\n        while (!queue.isEmpty()) {\n            const tempNode: TreeNode<T> | undefined = queue.poll();\n            if (tempNode) {\n                const left = tempNode.left;\n                const right = tempNode.right;\n                console.log(tempNode.data + \" \");\n                if (left != null) {\n                    queue.add(left);\n                }\n                if (right != null) {\n                    queue.add(right);\n                }\n            }\n        }\n    }\n    /**\n     * Given a Binary Tree, your task is to print its level order traversal such that each level is separated by $.\n     * For the below tree the output will be 1 $ 2 3 $ 4 5 6 7 $ 8 $.\n     *           1\n     *        /     \\\n     *      2        3\n     *    /    \\     /   \\\n     *   4     5   6    7\n     *     \\\n     *      8\n     * @param node\n     */\n    public levelOrderByLine(node: TreeNode<T>): void {\n        const queue = new Queue<TreeNode<T>>();\n        queue.add(node);\n        while (true) {\n            let size = queue.size();\n            if (size === 0) {\n               break;\n            }\n            while (size > 0) {\n                const tempNode = queue.poll();\n                if (!tempNode) {\n                    continue;\n                }\n                console.log(tempNode.data + \" \");\n                const left = tempNode.left;\n                const right = tempNode.right;\n                if (left != null) {\n                    queue.add(left);\n                }\n                if (right != null) {\n                    queue.add(right);\n                }\n                size--;\n            }\n            console.log(\"$ \");\n        }\n    }\n\n    /**\n     * Complete the function to print spiral order traversal of a tree.\n     * Testcase1: The tree is\n     *         1\n     *      /      \\\n     *    3       2\n     * So, the spiral level order would be 1 3 2\n     * Testcase2: The tree is\n     *                            10\n     *                         /        \\\n     *                      20         30\n     *                   /       \\\n     *                40       60\n     *                /         \\\n     *             50   55    70  80\n     * So, the spiral level order would be 10 20 30 60 40\n     */\n    public spiral(node: TreeNode<T>): void {\n        if (node === null) {\n            return;\n        }\n        const height = this.height(node);\n        let ltr = false;\n        for (let i = 1; i <= height; i++) {\n            this.printGivenLevel(node, i, ltr);\n            ltr = !ltr;\n        }\n    }\n\n    /**\n     * Given a binary tree, find height of it.\n     *\n     *         1\n     *      /    \\\n     *   10      39\n     *   /\n     *  5\n     * @param node\n     */\n    public height(node: TreeNode<T> | null): number {\n        if (node === null) {\n            return 0;\n        } else {\n            const lDepth = this.height(node.left);\n            const rDepth = this.height(node.right);\n            if (lDepth > rDepth) {\n                return lDepth + 1;\n            } else {\n                return rDepth + 1;\n            }\n        }\n    }\n\n    private printGivenLevel(node: TreeNode<T>, level: number, ltr: boolean) {\n        if (node === null) {\n            return;\n        }\n        if (level === 1) {\n            console.log(node.data + \" \");\n            return;\n        }\n        const left = node.left;\n        const right = node.right;\n        if (ltr) {\n            if (left) {\n                this.printGivenLevel(left, level - 1, ltr);\n            }\n            if (right) {\n                this.printGivenLevel(right, level - 1, ltr);\n            }\n        } else {\n            if (right) {\n                this.printGivenLevel(right, level - 1, ltr);\n            }\n            if (left) {\n                this.printGivenLevel(left, level - 1, ltr);\n            }\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/sanketmaru/projects/dsa-gfg/src/trees/tree-operations.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "TreeOperations",
    "memberof": "src/trees/tree-operations.ts",
    "static": true,
    "longname": "src/trees/tree-operations.ts~TreeOperations",
    "access": "public",
    "export": true,
    "importPath": "dsa-gfg/src/trees/tree-operations.ts",
    "importStyle": "{TreeOperations}",
    "description": "This is implementation of operations on a Tree",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "levelOrder",
    "memberof": "src/trees/tree-operations.ts~TreeOperations",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/trees/tree-operations.ts~TreeOperations#levelOrder",
    "access": "public",
    "description": "You are given a tree and you need to do the level order traversal on this tree.\nLevel order traversal of a tree is breadth-first traversal for the tree.\nTestcase1: The tree is\n1\n/      \\\n3       2\nSo, the level order would be 1 3 2\nTestcase2: The tree is\n10\n/        \\\n20         30\n/       \\\n40       60\nSo, the level order would be 10 20 30 40 60",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "TreeNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "levelOrderByLine",
    "memberof": "src/trees/tree-operations.ts~TreeOperations",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/trees/tree-operations.ts~TreeOperations#levelOrderByLine",
    "access": "public",
    "description": "Given a Binary Tree, your task is to print its level order traversal such that each level is separated by $.\nFor the below tree the output will be 1 $ 2 3 $ 4 5 6 7 $ 8 $.\n1\n/     \\\n2        3\n/    \\     /   \\\n4     5   6    7\n\\\n8",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "TreeNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "spiral",
    "memberof": "src/trees/tree-operations.ts~TreeOperations",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/trees/tree-operations.ts~TreeOperations#spiral",
    "access": "public",
    "description": "Complete the function to print spiral order traversal of a tree.\nTestcase1: The tree is\n1\n/      \\\n3       2\nSo, the spiral level order would be 1 3 2\nTestcase2: The tree is\n10\n/        \\\n20         30\n/       \\\n40       60\n/         \\\n50   55    70  80\nSo, the spiral level order would be 10 20 30 60 40",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "TreeNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "height",
    "memberof": "src/trees/tree-operations.ts~TreeOperations",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/trees/tree-operations.ts~TreeOperations#height",
    "access": "public",
    "description": "Given a binary tree, find height of it.\n\n1\n/    \\\n10      39\n/\n5",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "printGivenLevel",
    "memberof": "src/trees/tree-operations.ts~TreeOperations",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/trees/tree-operations.ts~TreeOperations#printGivenLevel",
    "access": "public",
    "description": "",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "TreeNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "level",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "ltr",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Data Structures and Algorithms implemented in Typescript. \n \nThis repository is a demonstration of my work where i have solved atleast 1-2 problems a day. This repository will help anyone to challenge yourself and do a DS-A problem a day.\n\nAll the solutions are in typescript which you can transpile to es2015 version also.\n\n# Install\n1. npm install\n2. npm run build \n\n\n[Stacks](./src/stack)\n   * [Implement a Stack using Array](./src/stack/stack.ts \"(target|_blank)\")\n   * [Implement a Stack using Linked List](./src/stack/stack-node.ts)\n   * [Implement 2 stacks in one array](./src/stack/two-stacks.ts)\n   * [Remove consecutive Duplicates](./src/stack/remove-consecutive-duplicates.ts)\n\n[Queues](./src/queue)\n   * [Implement a Queue using Array](./src/queue/queue.ts)\n   * [Implement a Queue using Linked List](./src/queue/queue-node.ts)\n   * [Implement a LRU Cache](./src/queue/lru-cache.ts)\n   * [Maximum of all subarrays of size k](./src/queue/maximum-subarrays.ts)\n   * [Reverse First K elements of Queue](./src/queue/reverse-k-elements.ts)\n\n>The problems are taken from <a href=\"https://practice.geeksforgeeks.org/\" target=\"_blank\">GeeksForGeeks</a>. It contains solutions to most of the problems in C++/Java and would recommend as the go to site for learning data structures and algorithms. ",
    "longname": "/Users/sanketmaru/projects/dsa-gfg/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"dsa-gfg\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Data Structure and Algorithms based on Geeks for Geeks DSA online Course\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack\",\n    \"test\": \"jest\",\n    \"test:debug\": \"node --inspect-brk node_modules/.bin/jest --runInBand\",\n    \"docs\": \"esdoc\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/sanketmaru/dsa-gfg.git\"\n  },\n  \"keywords\": [\n    \"algorithms\",\n    \"typescript\",\n    \"stack\",\n    \"queues\",\n    \"linkedlist\",\n    \"trees\",\n    \"heap\",\n    \"arrays\",\n    \"node\"\n  ],\n  \"author\": \"Sanket Maru\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/sanketmaru/dsa-gfg/issues\"\n  },\n  \"homepage\": \"https://github.com/sanketmaru/dsa-gfg#readme\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.5.5\",\n    \"@babel/preset-env\": \"^7.5.5\",\n    \"@babel/preset-typescript\": \"^7.3.3\",\n    \"@types/jest\": \"^24.0.17\",\n    \"babel-jest\": \"^24.9.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-coverage-plugin\": \"^1.1.0\",\n    \"esdoc-integrate-test-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-typescript-plugin\": \"^1.0.1\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"jest\": \"^24.9.0\",\n    \"ts-jest\": \"^24.0.2\",\n    \"ts-loader\": \"^6.0.4\",\n    \"tslint\": \"^5.18.0\",\n    \"typescript\": \"^3.5.2\",\n    \"webpack\": \"^4.39.2\",\n    \"webpack-cli\": \"^3.3.6\"\n  }\n}\n",
    "longname": "/Users/sanketmaru/projects/dsa-gfg/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]